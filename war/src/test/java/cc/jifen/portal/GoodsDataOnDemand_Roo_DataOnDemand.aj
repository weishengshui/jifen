// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cc.jifen.portal;

import cc.jifen.portal.Goods;
import cc.jifen.portal.GoodsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect GoodsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GoodsDataOnDemand: @Component;
    
    private Random GoodsDataOnDemand.rnd = new SecureRandom();
    
    private List<Goods> GoodsDataOnDemand.data;
    
    public Goods GoodsDataOnDemand.getNewTransientGoods(int index) {
        Goods obj = new Goods();
        setCode(obj, index);
        setDescription(obj, index);
        setImage_path(obj, index);
        setLocation(obj, index);
        setModelNumber(obj, index);
        setName(obj, index);
        setQuantity(obj, index);
        return obj;
    }
    
    public void GoodsDataOnDemand.setCode(Goods obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void GoodsDataOnDemand.setDescription(Goods obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void GoodsDataOnDemand.setImage_path(Goods obj, int index) {
        String image_path = "image_path_" + index;
        obj.setImage_path(image_path);
    }
    
    public void GoodsDataOnDemand.setLocation(Goods obj, int index) {
        String location = "location_" + index;
        obj.setLocation(location);
    }
    
    public void GoodsDataOnDemand.setModelNumber(Goods obj, int index) {
        String modelNumber = "modelNumber_" + index;
        obj.setModelNumber(modelNumber);
    }
    
    public void GoodsDataOnDemand.setName(Goods obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void GoodsDataOnDemand.setQuantity(Goods obj, int index) {
        String quantity = "quantity_" + index;
        obj.setQuantity(quantity);
    }
    
    public Goods GoodsDataOnDemand.getSpecificGoods(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Goods obj = data.get(index);
        Long id = obj.getId();
        return Goods.findGoods(id);
    }
    
    public Goods GoodsDataOnDemand.getRandomGoods() {
        init();
        Goods obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Goods.findGoods(id);
    }
    
    public boolean GoodsDataOnDemand.modifyGoods(Goods obj) {
        return false;
    }
    
    public void GoodsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Goods.findGoodsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Goods' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Goods>();
        for (int i = 0; i < 10; i++) {
            Goods obj = getNewTransientGoods(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
